/*
Throw :: used to manually generate an Exception.
-> Generate an Exception by ourselves.

int  x = 10, y = 0;
try {
    int z = x / y;      => new ArithmeticException()        -> Here exception is occured due to some scenraios, due to some constraint.
    
    throw new ArithmeticException();                    -> Here exception is generated by ourselfs, without any reason (manually).

}

-> In both above scenarios, same thing happened. A new Exception Object is generated (an Exception is occured).
-> But whether exception is generated manually or by programatically, In both the cases we have to handle the exception using try-catch blocks etc.

-> We handle manually exceptions, when we make our exception classes, user-defined exception classes, custom exception classes. When some rules of our exception classes violates, then we create our exception class object manually.
Example :: deposit / withdraw '0' amount from our class


=> How to create our Exception Class

class myException extends Exception {
    // It is recommended to provide default constructor when we craete our exception class
    myException() {

    }

    // overriding toString function which exists in java.lang.Object class
    String toString() {

    }
}


Q :: Our defined exception class exists in which category, Checked or Unchecked??? If we do not provide handler for our Exception class, then JAVA can provide us handler for it or not? 
ANS::
*/

class NewException extends Exception {
    int value;

    NewException(int val) {
        value = val;
    }

    // overriding toString function which exists in java.lang.Object class (It is necessary to override this, otherwise parents (Exception's) toString will be callled)
    public String toString() {
        return "NewException " + value;
    }
}

public class Exception_Handling_Throw_example01 {
    public static void main(String args[]) {
        doWork(4);
        doWork(3);
        doWork(2);
        doWork(1);
        doWork(0);
    }

    public static void doWork(int val) {
        try {
            if(val == 0) throw new NewException(val);
            else System.out.println("No PROBLEM");

        } catch (NewException ex) {
            System.out.println("Exception: " + ex);
        }
    }
}
